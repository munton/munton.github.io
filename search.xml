<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>换电脑如何更新 Hexo 博客</title>
    <url>/posts/4a17b167.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p>
<h2 id="换电脑如何更新-hexo-博客"><a class="markdownIt-Anchor" href="#换电脑如何更新-hexo-博客"></a> 换电脑如何更新 Hexo 博客</h2>
<h3 id="github-pages-hexo-搭建原理"><a class="markdownIt-Anchor" href="#github-pages-hexo-搭建原理"></a> Github Pages + Hexo 搭建原理</h3>
<p>首先要知道通过Github Pages+Hexo搭建的博客，在username.github.io的仓库存储的是生成的静态网页（Hexo下所有生成的静态文件会放在public/文件夹中，所谓部署deploy其实就是<br />
将public/文件夹中内容上传到Git仓库username.github.io中。也就是说，你的仓库username.github.io中的文件只是博客（D:/MyBlog或者其他名字）文件夹下的public/下的文件），而真正的原始文件在本地的hexo文件夹中。</p>
<span id="more"></span>
<p>利用Github如何实现Hexo博客版本管理？也就是原电脑和新电脑都可以提交、更新博客，实现同步。我先抛砖引玉，简单来说就是在Git仓库username.github.io中，一个master分支用来存放生成的静态网页，一个hexo分支用来存放网站的原始文件。</p>
<h3 id="首次搭建的电脑"><a class="markdownIt-Anchor" href="#首次搭建的电脑"></a> 首次搭建的电脑</h3>
<ul>
<li>
<p>Github上创建分支，在 <a href="http://username.github.io">username.github.io</a> 博客仓库创建hexo分支，并设为默认分支。打开博客项目仓库的Settings-&gt;Branches-&gt;Default branch，点击切换分支修改为hexo</p>
</li>
<li>
<p>在本地D盘下（位置任意）右键Git bash here，执行以下指令，把username.github.io项目文件colne到本地，也就是把仓库(username.github.io仓库hexo分支) 复制到本地（<a href="http://xn--username-8t1mk43bd0n739a.github.io">文件夹名username.github.io</a>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此时看Git bash窗口第一行语句，含username.github.io(hexo)</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/munton/munton.github.io.git</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进入username.github.io文件夹，勾选显示所有隐藏文件和文件夹，进入刚才 clone 到本地的仓库，删掉除了 .git 文件夹以外的所有内容。</p>
</li>
<li>
<p>在克隆的仓库下分别执行以下命令更新删除操作到远程，<a href="http://xn--username-8k1mf8bv2qcc4kv7jexdj4tss4a15biwz28ar23a50e52iimby75ucgtai13jy9n7u8b.github.io">把刚才删除操作引起的本地仓库变化更新到远程username.github.io</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch  </span><br><span class="line"><span class="comment">#出现* hexo</span></span><br><span class="line"></span><br><span class="line">git add -A <span class="comment">#添加所有文件到index</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;--&quot;</span> </span><br><span class="line"><span class="comment">#把刚才删除操作提交本地git，出现delete mode，初始化Init</span></span><br><span class="line"></span><br><span class="line">git push origin hexo</span><br><span class="line"><span class="comment">#本地推送到远程，出现hexo -&gt; hexo</span></span><br><span class="line"><span class="comment">#此时刷新下github页面hexo分支应该已经被清空了</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将克隆仓库【<a href="http://username.github.io">username.github.io</a>】中的.git文件夹复制到博客文件夹【MyBlog】根目录下（含有 themes、source 等文件夹），<a href="http://xn--username-vp1m618avkb5h06erv8bz3hjwfu1ns8wvhas4pl31hglot0z3u4gtca.github.io">这样本机博客目录已经变成可以和远程username.github.io</a>(hexo )分支相连。</p>
</li>
<li>
<p>在博客目录下执行命令同步到远程的hexo分支。注意，所有的步骤都已经执行过本地关联远程仓库操作了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A  <span class="comment">#添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;备份Hexo(含主题)&quot;</span>   <span class="comment">#提交</span></span><br><span class="line">git push origin hexo  <span class="comment">#推送hexo分支到github</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><code>git add -A</code>报错</strong></p>
<p>原因：已经在当前的存储库中添加了另一个git存储库，外部存储库的克隆将不包含嵌入式存储库的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hint: You<span class="string">&#x27;ve added another git repository inside your current repository.</span></span><br><span class="line"><span class="string">Clones of the outer repository will not contain the contents of the embedded repository and will not know how to obtain it.</span></span><br><span class="line"><span class="string">If you meant to add a submodule, use:git submodule add &lt;url&gt; themes/next</span></span><br><span class="line"><span class="string">If you added this path by mistake, you can remove it from the index with:</span></span><br><span class="line"><span class="string">git rm --cached themes/next</span></span><br><span class="line"><span class="string"> See &quot;git help submodule&quot; for more information.</span></span><br></pre></td></tr></table></figure>
<p>解决（2选1，推荐使用Git子模块）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加子模块非常简单，命令如下：git submodule add &lt;url&gt; &lt;path&gt;其中，url为子模块的路径，path为该子模块存储的目录路径。使用git submodule add带有要开始跟踪的项目的绝对或相对 URL的命令。</span></span><br><span class="line">git submodule add &lt;url&gt; themes/next</span><br><span class="line">如</span><br><span class="line">git submodule add --branch v8.8.1 https://github.com/next-theme/hexo-theme-next themes/next_v8.8.1</span><br><span class="line"><span class="comment"># git submodule add https://github.com/munton/hexo-theme.git</span></span><br><span class="line"><span class="comment"># 用以下方法将它从暂存区index中删除</span></span><br><span class="line">git rm -cached themes/next</span><br></pre></td></tr></table></figure>
<h3 id="另一台电脑的操作"><a class="markdownIt-Anchor" href="#另一台电脑的操作"></a> 另一台电脑的操作</h3>
<ul>
<li>
<p>先把电脑上环境安装好，node.js、git、hexo，ssh key 也创建和添加好。</p>
</li>
<li>
<p>选好博客安装的目录，git bash将远程仓库克隆到本地</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 仓库地址 <span class="comment">#默认分支为hexo</span></span><br><span class="line">或</span><br><span class="line">git <span class="built_in">clone</span> -b hexo 仓库地址 <span class="comment">#选择分支hexo</span></span><br></pre></td></tr></table></figure>
<ul>
<li>然后进入项目目录，安装依赖启动博客服务器，生成静态文件，浏览器打开 localhost:4000 可以看。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save <span class="comment">#建议安装时加--save参数会把插件写入package.json，那么git clone下来后，只要npm install就能装好hexo所有的依赖</span></span><br><span class="line"></span><br><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<ul>
<li>发布文章同之前的教程一样，写好文章后</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<h3 id="多电脑同步写博客"><a class="markdownIt-Anchor" href="#多电脑同步写博客"></a> 多电脑同步写博客</h3>
<p>我们的博客仓库有两个分支，<em>master</em>分支和<em>hexo</em>分支，master分支用于存放Hexo生成的静态资源文件，hexo分支用于存放网站的原始文件。所以，我们在一台设备上写好一篇文章或进行了博客的修改后，在博客目录下执行以下命令，将master中的静态资源文件更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<p>执行以下命令，将hexo中的网站原始文件更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull <span class="comment">#拉取远程仓库，每次有新的操作的时候，别忘了在另一台电脑上更新</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;描述（自己写）&quot;</span></span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>
<p><strong>注意：每次有新的操作的时候，别忘了在另一台电脑上更新</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull hexo <span class="comment">#分支名hexo</span></span><br></pre></td></tr></table></figure>
<p>以后无论在哪台电脑上，更新以及提交博客，依次执行，<code>git pull</code>，<code>git add .</code>，<code>git commit -m &quot;--&quot;</code>，<code>git push origin hexo</code>，<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>即可。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo + Github 搭建博客</title>
    <url>/posts/4a17b157.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p>
<h2 id="hexo-github-搭建博客"><a class="markdownIt-Anchor" href="#hexo-github-搭建博客"></a> Hexo + Github 搭建博客</h2>
<h3 id="nodejs-下载安装"><a class="markdownIt-Anchor" href="#nodejs-下载安装"></a> Node.js 下载安装</h3>
<p><a href="https://nodejs.org/zh-cn/download/">Node.js 官方下载</a></p>
<p><a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a></p>
<p><strong>注意：node.js v14.0.0以后不支持win7，可选择之前的版本</strong></p>
<span id="more"></span>
<p>安装过程基本无脑下一步，建议更改安装目录（我的路径是D:\Program Files\nodejs）</p>
<p>键盘按下【win+R】键，输入cmd，然后【Enter】，分别输入以下命令，显示版本号，则安装成功</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">node -v #查看版本号，如v16.<span class="number">13</span>.<span class="number">0</span></span><br><span class="line">npm -v #如v16.<span class="number">13</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="nodejs-环境配置可选"><a class="markdownIt-Anchor" href="#nodejs-环境配置可选"></a> Node.js 环境配置（可选）</h3>
<p>说明：这里的环境配置主要修改npm安装的全局模块所在的路径，以及缓存cache的路径。不修改的话以后在执行类似：<code>npm install express [-g]</code>（后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占用C盘空间。（AppData文件夹默认是隐藏的）</p>
<p>如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则必须在我安装的文件夹【D:\Program Files\nodejs】下创建两个文件夹【node_global】及【node_cache】（在node_global文件夹下再建一个node_modules文件夹，配置环境变量用，也可以不创建，后面会自动创建）此时并没有更改完成，需要手动指定到这两个文件夹中，以下方法任选一个</p>
<ul>
<li>方法1：【win+R】打开运行窗口，输入cmd，回车再输入以下两条指令</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;创建的node_global文件夹所在路径&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;创建的node_cache文件夹所在路径&quot;</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">npm config <span class="built_in">set</span> prefix &quot;D:\Program Files\nodejs\node_global&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;D:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>
<p>这些指令其实就是在【C:\Users\“你的用户名” 】文件夹里创建.npmrc文件，并写下类似语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prefix=D:\Program Files\nodejs\node_global</span><br><span class="line">cache=D:\Program Files\nodejs\node_cache</span><br><span class="line">registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<ul>
<li>方法2：在nodejs的安装目录下，进入node_modules——&gt;npm——&gt;.npmrc文件，打开添加类似语句：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">prefix=创建的node_global文件夹所在路径</span><br><span class="line">cache=创建的node_cache文件夹所在路径</span><br><span class="line">如：</span><br><span class="line">prefix=D:\Program Files\nodejs\node_global</span><br><span class="line">cache=D:\Program Files\nodejs\node_cache</span><br></pre></td></tr></table></figure>
<p>修改完毕后，关闭cmd，右键此电脑——&gt;高级系统设置——&gt;环境变量</p>
<p>进入环境变量对话框，在【系统变量】中，【新建】，变量名：【NODE_PATH】， 变量值：node_global文件夹下的node_modules文件夹。如【D:\Program Files\nodejs\node_global\node_modules】</p>
<p>修改【用户变量】中的【Path】变量，将默认的npm路径【C:\Users\用户名\AppData\Roaming\npm】修改为新建的node_global路径，如【D:\Program Files\nodejs\node_global】</p>
<p>至此完成，以后全局安装模块文件所在位置【D:\Program Files\nodejs\node_global\node_modules】</p>
<h3 id="相关补充可选"><a class="markdownIt-Anchor" href="#相关补充可选"></a> 相关补充（可选）</h3>
<ul>
<li>
<p>如何卸载：先删除环境变量再卸载</p>
</li>
<li>
<p>添加国内镜像源</p>
</li>
</ul>
<p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<ul>
<li>安装淘宝源的cnpm</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org   </span><br><span class="line"></span><br><span class="line">npm uninstall -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="git-下载安装"><a class="markdownIt-Anchor" href="#git-下载安装"></a> Git 下载安装</h3>
<p><a href="https://git-scm.com/downloads/">Git官网下载</a></p>
<p><a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a></p>
<p>安装过程基本无脑下一步，建议更改安装目录（我的路径是D:\Program Files\Git）</p>
<p>键盘按下【win+R】键，输入cmd，然后【Enter】，分别输入以下命令，显示版本号，则安装成功</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git --version #查看版本号，如<span class="number">2</span>.<span class="number">34</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="hexo-下载安装"><a class="markdownIt-Anchor" href="#hexo-下载安装"></a> Hexo 下载安装</h3>
<p>在本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件（注意不要有中文路径，我的 D/MyBlog ），进入新建的文件夹，右键选择Git Bash Here，依次输入下面的命令。可参考<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g <span class="comment"># 全局安装 hexo 框架</span></span><br><span class="line"></span><br><span class="line">hexo init  <span class="comment"># 初始化文件夹，会自动用 git clone命令去 GitHub 下载一个 hexo 默认模板代码库</span></span><br><span class="line"></span><br><span class="line">npm install  <span class="comment"># 安装 hexo 依赖，根据刚下载的代码库中的配置文件，下载并安装所需依赖包</span></span><br></pre></td></tr></table></figure>
<h4 id="可能出现的问题及解决办法"><a class="markdownIt-Anchor" href="#可能出现的问题及解决办法"></a> 可能出现的问题及解决办法</h4>
<p><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></p>
<p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决，再重新执行安装命令（默认源是 <a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a> ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 临时修改 npm 源安装 hexo (仅本条命令有效)</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org install -g hexo-cli</span><br><span class="line"><span class="comment"># 或者永久修改 npm 源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><strong><code>hexo init</code>报错连接不上</strong></p>
<p>大概率是因为 GitHub 被墙导致网络连接失败,可以cmd,输入ping github.com检查请求是否超时测试（以下2种不挂梯子的解决办法可选其1）</p>
<ul>
<li>替换 GitHub 链接</li>
</ul>
<p>经过查找，发现 hexo 的 npm 模块在 Windows 默认环境下是在这个路径下：C:\Users\Blogger用户名\AppData\Roaming\npm\node_modules\hexo-cli\lib\console，但是修改环境变量后【D:\Program Files\nodejs\node_global\node_modules\hexo-cli\lib\console】在这个文件夹下有一个 init.js 文件，打开文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将const GIT_REPO_URL = &#x27;https://github.com/hexojs/hexo-starter.git&#x27;;</span><br><span class="line">替换为const GIT_REPO_URL = &#x27;https://github.com.cnpmjs.org/hexojs/hexo-starter.git&#x27;;</span><br></pre></td></tr></table></figure>
<p>再次运行 hexo init 成功出现Start blogging with Hexo!</p>
<ul>
<li>配置hosts文件</li>
</ul>
<p>访问<a href="http://tool.chinaz.com/dns?type=1&amp;host=github.com&amp;ip=">站长工具网站</a>，获取GitHub的相关DNS。先在本地ping相应的IP，如果可以连接上并且速度还行，那么可以将相关信息配置到本地hosts文件（所在位置C:\Windows\System32\drivers\etc ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如：</span><br><span class="line"># github hosts</span><br><span class="line">13.114.40.48 github.com</span><br></pre></td></tr></table></figure>
<p>hosts文件配置完成后，在cmd命令行执行如下命令：<code>ipconfig /flushdns</code> ，出现Windows IP 配置，已成功刷新 DNS 解析缓存。</p>
<ul>
<li>权限不足，Error: EPERM: operation not permitted</li>
</ul>
<p>修改或者直接管理员权限</p>
<p>前面三条命令执行成功没有问题的话，Hexo 框架在本地就已经搭建好了。还是在文件夹右键Git Bash命令行窗口里，依次执行下面的命令，或者直接执行<code>hexo g &amp;&amp; hexo s</code>，其中<code>hexo g</code>是 <code>hexo generate</code>命令的简写，<code>hexo s</code>是 <code>hexo server</code>命令的简写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g  <span class="comment"># 生成静态网站</span></span><br><span class="line"></span><br><span class="line">hexo s  <span class="comment"># 启动服务器</span></span><br></pre></td></tr></table></figure>
<p>成功出现Hexo is running at <a href="http://localhost:4000">http://localhost:4000</a>，此时，打开浏览器输入网址<code>http://localhost:4000/</code>，就可以看到博客示例。</p>
<h3 id="主题更换及基本配置"><a class="markdownIt-Anchor" href="#主题更换及基本配置"></a> 主题更换及基本配置</h3>
<p>选好主题后，在 Hexo 博客根目录(D:\MyBlog)下，右键选择Git Bash Here，执行下面命令：以NexT主题为例，参考<a href="https://theme-next.js.org/docs/getting-started/installation.html">NexT主题文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载next v8.8.1主题到 themes 文件夹， git clone &lt;仓库地址&gt; themes/&lt;主题名&gt; ，&lt;仓库地址&gt;可以在每个主题的 GitHub 主页点击code获取https</span></span><br><span class="line">git <span class="built_in">clone</span> --branch v8.8.1 https://github.com/next-theme/hexo-theme-next themes/next</span><br><span class="line">或者通过 GitLab 上的镜像下载</span><br><span class="line">git <span class="built_in">clone</span> --branch v8.8.1 https://gitlab.com/hexo-theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>打开博客根目录下的 themes 文件夹(D:\MyBlog\themes)可以看到 next 文件夹，然后用记事本打开博客根目录下的 _config.yml (D:\MyBlog_config.yml)，找到theme标签，默认值是landscape，把它改为要更换的主题名字next</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>然后执行启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理 &amp;&amp; 生成 &amp;&amp; 启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>到浏览器打开网址http://localhost:4000，可以看到换上新的主题</p>
<p>Hexo 的配置大部分都保存在博客根目录下的_config.yml文件，我这里是D:\MyBlog_config.yml，我们叫它<code>根目录配置文件</code>，直接修改这个文件就可以更改博客的一些设置，像前面更换主题就是修改这个文件的参数实现的。关于这个文件的每个参数的详细意义，可以在 <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>里查看，每一个参数都有示例，讲解的非常详细。</p>
<p>此外，下载的第三方主题的根目录下也有一个_config.yml文件，它是<code>主题配置文件</code>。关于这个文件每个参数的详细意义，可以在每个主题的 GitHub 主页看到详细说明。</p>
<p>想自己开发主题的，推荐<a href="https://liuyib.github.io/2019/08/20/develop-hexo-theme-from-0-to-1/">从 0 到 1 开发 Hexo 主题杂谈</a></p>
<h3 id="博客发布到github"><a class="markdownIt-Anchor" href="#博客发布到github"></a> 博客发布到Github</h3>
<h4 id="配置-git-参数"><a class="markdownIt-Anchor" href="#配置-git-参数"></a> 配置 Git 参数</h4>
<p>在博客根目录下，右键，打开Git Bash Here，配置用户名和邮箱，用于 Git 提交时的身份识别。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 username 和 username@XXX.com 是你注册 GitHub 的用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;username@XXX.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>生成 SSH keys，主要用于Git 提交时的权限控制和加密，本地根据 RSA 算法生成公私密钥对，然后将公钥添加到 GitHub 上，本机就可以提交代码到自己的 GitHub 库了。这个是根据当前使用的电脑的一些信息生成的，所以换电脑提交时要重新生成并添加。</p>
<p>输入下面命令，然后一直按回车（默认4次回车）直到结束</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;username@XXX.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>看代码上生成公钥位置【C:\用户名\ .ssh\id_rsa.pub】，找到记事本打开或者输入下面的命令，查看公钥内容，应该是一个<code>ssh-rsa</code>开头，以<code>你的邮箱</code>结尾的长字符串。复制公钥内容（在Git Bash命令行里，默认选中文字松开鼠标就会自动把选中内容复制到剪贴板，默认鼠标中键是粘贴），打开自己的 Github 主页，点击右上角的头像，点击Settings，点击SSH and GPG keys，然后点击New SSH keys，Title 可以随便起一个名字（For MyBlog），Key 填写上一步复制的公钥内容，然后点击Add SSH key</p>
<p>最后执行下面的命令，出现<code>你的用户名</code>和<code>successfully</code>字样，说明配置成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试ssh是否绑定成功，直接下面复制代码</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h4 id="安装-hexo-发布插件"><a class="markdownIt-Anchor" href="#安装-hexo-发布插件"></a> 安装 Hexo 发布插件</h4>
<p>在博客根目录下，右键，打开Git Bash Here，输入下面的命令，安装<code>hexo-deployer-git</code>。（安装失败或者卡住，修改 npm 源）这个插件用于把生成好的静态页面上传到 GitHub Pages 仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下2选1，推荐后者</span></span><br><span class="line">npm install hexo-deployer-git</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h4 id="发到github-page"><a class="markdownIt-Anchor" href="#发到github-page"></a> 发到github page</h4>
<p>打开博客<code>根目录配置文件</code>(D:\MyBlog_config.yaml)，找到文件最后一行，修改为下面的配置并保存（没有的配置项自行添加）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名,注意分支名branch，以下2选1</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:xxxxxx/xxxxxx.github.io.git  <span class="comment"># 仓库SSH</span></span><br><span class="line">  branch: main</span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">disploy: </span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/munton/munton.github.io.git <span class="comment">#仓库HTTPS</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<p>再执行下面的命令，出现https://你的用户名.github.io即成功上传Github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意最后变成d了，原来的s表示服务起在本地，现在的d表示部署在远端</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p><strong>hexo d可能出现问题</strong></p>
<p>大部分是连接问题，建议多次打开Git Bash重新尝试；若是弹出github登录窗口（有github图标），弹出OpenSSH窗口，则输入用户名和token密钥。</p>
<p>打开自己的 Github 主页，点击右上角的头像，Settings——&gt;Developer——&gt;Personal access tokens，点击Generate new token，建议全部勾选生成密钥，复制保存（注意：密钥只有第一次可见）</p>
<h3 id="使用-typora-写文章"><a class="markdownIt-Anchor" href="#使用-typora-写文章"></a> 使用 Typora 写文章</h3>
<p>网上有很多介绍的 Typora 的文章，下面介绍几个我觉得很有用很方便的设置。</p>
<p>打开<code>文件</code> –&gt; <code>偏好设置</code></p>
<h4 id="打开自动保存"><a class="markdownIt-Anchor" href="#打开自动保存"></a> 打开自动保存</h4>
<p>选择<code>通用</code>，勾选 <code>自动保存</code>。这样软件会定期自动保存我们的编辑内容，防止异常退出时忘记保存。</p>
<h4 id="打开成对符号"><a class="markdownIt-Anchor" href="#打开成对符号"></a> 打开成对符号</h4>
<p>选择<code>编辑器</code>，勾选 <code>匹配括号和引号</code>和<code>匹配 Markdown 字符</code>。这样当我们输入括号(<code>[]()&#123;&#125;</code>)等成对的符号时，只需要输入左边一半，软件会自动补充右边一半</p>
<h4 id="打开首行缩进"><a class="markdownIt-Anchor" href="#打开首行缩进"></a> 打开首行缩进</h4>
<p>选择<code>Markdown</code>，勾选 <code>首行缩进</code>。这个看自己需要，只是在 Typora 本地显示中首行缩进，因为 Markdown 语法本身并没有支持首行缩进的符号，所以文件拿到别的地方不会有首行缩进的效果。如果非要首行缩进，可以在段落开头加个<code></code>可以在其他地方打开时也能首行缩进。</p>
<h4 id="打开自动保存图片"><a class="markdownIt-Anchor" href="#打开自动保存图片"></a> 打开自动保存图片</h4>
<p>选择<code>图像</code>，选择<code>插入图片时...</code>自动执行的动作：</p>
<ul>
<li>默认是<code>无特殊操作</code>，当你写文章时，粘贴或者拖动进来的图片会自动保存在<code>C:\Users\&lt;电脑用户名&gt;\AppData\Roaming\Typora\typora-user-images</code>目录下。</li>
<li><code>复制图片到当前文件夹</code>，选择该选项时，粘贴或者拖动进来的图片会自动保存在当前编辑的文件同目录下。</li>
<li><code>复制图片到 ./$&#123;filename&#125;.assets 文件夹</code>，选择该选项时，粘贴或者拖动图片进来，会自动在当前编辑的文件目录下新建文件夹<code>$&#123;filename&#125;.assets</code>并将图片复制到该文件夹下，其中``${filename}<code>是当前编辑的文件名，不包含</code>.md`。</li>
<li><code>上传图片</code>，选择该选项时，粘贴或者拖动图片进来，会根据下面的<code>上传服务设置</code>将图片自动上传到图床，平时最好用这个设置，详细内容在下一篇文章中介绍。</li>
<li><code>复制到指定路经</code>，选择该选项时，可以自己填入一个文件夹，粘贴或者拖动图片进来，会自动创建文件夹并将图片复制进去。</li>
</ul>
<p>建议选择<code>上传图片</code>，按照下篇文章的方法将图片保存在图床。当然，如果写的的文章只保存在本地或者需要断网时浏览，那么可以选择其他几个选项。</p>
<h3 id="typora-picgo-github图床-jsdelivr-cdn"><a class="markdownIt-Anchor" href="#typora-picgo-github图床-jsdelivr-cdn"></a> Typora + PicGo + GitHub图床 + jsDelivr CDN</h3>
<p>PicGo 是一位中国开发者基于 electron-vue 开发的用于快速上传图片并获取图片 URL 链接的开源工具，GitHub主页：<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></p>
<p>写文章需要引用图片时，我们要打开浏览器将图片上传到图床服务器，再把链接复制粘贴到文章中。这太影响效率了，能不能每次插入图片时自动把图片上传并返回链接地址呢？PicGo 便是做这件事的软件，只要配置好图床类型，就可以直接拖拽图片进行上传并自动返回图片链接，配合 Typora 还可以实现在文章中插入图片时自动上传并替换为链接内容，完全不用感知上传图片的过程。</p>
<p>PicGo 本体支持七牛云、腾讯云、又拍云、阿里云、SM、Imgur、GitHub这些图床，而且还支持自己扩展第三方图床的支持插件，比如就有人开发了 Gitee 的插件。更多介绍见<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%90%AC%E8%AF%B4%E4%BD%A0%E4%B9%9F%E6%83%B3%E7%94%A8picgo">官方文档</a>，下载地址：<a href="https://molunerfinn.com/PicGo/">PicGo</a></p>
<p>打开下载地址，选择一个版本点进去，点击下载对应的安装包安装即可。同样的，如果下载速度太慢，右键<code>复制链接地址</code>，粘贴到迅雷下载。</p>
<h4 id="新建github仓库"><a class="markdownIt-Anchor" href="#新建github仓库"></a> 新建GitHub仓库</h4>
<p>第一步要先在 GitHub 新建一个仓库用于存储图片。</p>
<p>打开自己 GitHub <a href="https://github.com/">主页</a>，点击New新建仓库。<code>Repository name</code>填写仓库名字，<code>Description</code>填写仓库描述，勾选<code>public</code>和<code>Add a README file</code>，点击Create repository创建仓库。</p>
<h4 id="获取-repo-tokens"><a class="markdownIt-Anchor" href="#获取-repo-tokens"></a> 获取 repo tokens</h4>
<p>这个 token 主要用于让 PicGo 有权限往我们的仓库 push 代码(图片)。</p>
<p>点击自己的头像，选择Settings，选择Developer settings，点击 Personal access tokens。然后点击Generate new token，因为是敏感操作，此时需要确认密码。</p>
<p><code>Note</code>填写 token 用途，用于备忘（For PicGo,For MyBlog）。下面只需要勾选<code>repo</code>，只给更新仓库的权限。最后点击最下面的Generate token创建成功，复制出现的字符串下一步使用。注意，为了安全起见此字符串只会出现一次，点击其他页面后就无法再查看了，需要重新创建，所以最好先保存到本地编辑器中</p>
<h4 id="picgo-配置"><a class="markdownIt-Anchor" href="#picgo-配置"></a> PicGo 配置</h4>
<p>打开 PicGo ,选择<code>图床设置</code>，选择<code>GitHub图床</code>，填写参数：</p>
<ul>
<li><code>设定仓库名</code>，填写格式为<code>用户名/仓库名</code>munton/imageHostingService</li>
<li><code>设定分支名</code>，填写默认分支<code>master</code>或者<code>main</code></li>
<li><code>设定Token</code>，填写上一步获取的 token 值</li>
<li>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</li>
<li><code>指定存储路径</code>，选填，可以自定义名称，比如用年月来分类，不填图片会上传在仓库根目录。</li>
<li><code>设定自定义域名</code>，用于修改返回的 url 前缀，不填则返回原始 url。后面配置CDN加速需要更改此项。</li>
</ul>
<p>选择设为默认图床，点击确定保存配置。</p>
<p>配置完成后，点击<code>上传区</code>，随便选择电脑上一张图片拖动到上传区，上传成功后会弹窗提示，将该 url 复制到浏览器打开就可以看到图片。可以在<code>PicGo设置</code>，打开<code>上传后自动复制URL</code>，这样上传成功后图片 url 会自动复制在剪贴板，可以直接粘贴到记事本。</p>
<h4 id="cdn-加速jsdelivr"><a class="markdownIt-Anchor" href="#cdn-加速jsdelivr"></a> CDN 加速(jsDelivr)</h4>
<p>从上一步可以看到 GitHub 存储的图片地址是 <code>https://raw.githubusercontent.com</code> 开头的网址，这个域名在某些地方可能打不开或者很慢导致图片加载失败，所以我们需要对图片配置 CDN 加速。</p>
<p>在这个互联网时代，还真有免费 CDN —— jsDelivr CDN速度、稳定性都可以。</p>
<p>打开<a href="https://www.jsdelivr.com/">jsDelivr CDN 官网</a>，可以看到 jsDelivr 支持 npm、GitHub、WordPress三个站点的加速，用于我们的GitHub图床是再适合不过了。</p>
<p>在浏览器输入<code>https://cdn.jsdelivr.net/gh/用户名/仓库名/</code>，(注意最后的<code>/</code>不要丢)，可以打开我们在 GitHub 上创建的仓库的文件列表，说明我们在 Github 上创建的仓库已经默认被 jsDelivr 缓存了</p>
<p>所以只要把资源链接中的前面部分更改一下就可以使用 CDN 加速了。<a href="https://cdn.jsdelivr.net/gh/munton/imageHostingService@master">https://cdn.jsdelivr.net/gh/munton/imageHostingService@master</a></p>
<p>例如，原始图片地址的格式为<code>https://raw.githubusercontent.com/用户名/仓库名/分支名/目录/图片名.png</code>，更改后的图片地址的格式<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名/目录/图片名.png</code>，可以分别打开一下两个图片网址感受一下速度区别。</p>
<p><strong>PicGo 中需要改一下自定义域名</strong>，之后上传图片自动生成的链接就是 jsDelivr 的链接了。具体就是在<code>设定自定义域名</code>填写<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@master</code></p>
<h4 id="typora-配置"><a class="markdownIt-Anchor" href="#typora-配置"></a> Typora 配置</h4>
<p>打开<code>文件</code>，<code>偏好设置</code>，<code>图像</code>，选择插入图片时<code>上传图片</code>，勾选图中三个选项，上传服务设定选择<code>PicGo (app)</code>，PicGo 路径通过后面的文件夹选择自己电脑上 PicGo 的安装路径。此时，使用 Typora 编辑文件，拖入或者粘贴图片时，会自动调用 PicGo 将图片上传到我们的 GitHub 图床，并把返回的图片链接粘贴到文章中。</p>
<p>方案美中不足的是虽然CDN加速解决了查看图片的速度，但是上传还是有点慢的，会出现在 Typora 中粘贴了一张图片后需要5秒以上才能上传成功并加载出来，还有就是本地没有分类备份(其实在<code>C:\Users\用户名\AppData\Roaming\Typora\typora-user-images</code>目录下有缓存)。</p>
<h3 id="后续更新中"><a class="markdownIt-Anchor" href="#后续更新中"></a> 后续更新中</h3>
]]></content>
  </entry>
  <entry>
    <title>Hexo 插件使用</title>
    <url>/posts/4a17b177.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p>
<h2 id="hexo-插件使用"><a class="markdownIt-Anchor" href="#hexo-插件使用"></a> Hexo 插件使用</h2>
<h3 id="post字数插件"><a class="markdownIt-Anchor" href="#post字数插件"></a> Post字数插件</h3>
<h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4>
<p>在站点根目录执行以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-word-counter </span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="hexo配置"><a class="markdownIt-Anchor" href="#hexo配置"></a> Hexo配置</h4>
<p>修改<code>站点配置文件</code>激活这个插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.yml</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: <span class="literal">true</span>  </span><br><span class="line">  time: <span class="literal">true</span></span><br><span class="line">  total_symbols: <span class="literal">true</span></span><br><span class="line">  total_time: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 以下数值自己修改</span></span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>
<h4 id="next默认配置"><a class="markdownIt-Anchor" href="#next默认配置"></a> NexT默认配置</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># next/_config.yml</span></span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: <span class="literal">true</span></span><br><span class="line">  item_text_total: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义字体"><a class="markdownIt-Anchor" href="#自定义字体"></a> 自定义字体</h3>
<p>以下更改将涵盖字体自定义功能。编辑<code>source/_data/variables.styl</code>在网站根目录 并添加两个变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/source/_data/variables.styl</span></span><br><span class="line">// 标题字体，将其设置为您想要的字体系列。</span><br><span class="line"><span class="variable">$font</span> -family-headings = Georgia, sans</span><br><span class="line"></span><br><span class="line">// 将其设置为您想要的字体系列。</span><br><span class="line"><span class="variable">$font</span> -family-base = <span class="string">&quot;Microsoft YaHei&quot;</span> , Verdana, sans-serif</span><br><span class="line"></span><br><span class="line">// 代码字体。</span><br><span class="line"><span class="variable">$code</span> - font-family = <span class="string">&quot;Input Mono&quot;</span> , <span class="string">&quot;PT Mono&quot;</span> , Consolas, Monaco, Menlo, monospace</span><br><span class="line"></span><br><span class="line">// 文章的字体大小。</span><br><span class="line"><span class="variable">$font</span> -size-base = 16px</span><br><span class="line"></span><br><span class="line">// 表格和代码的字体大小。</span><br><span class="line"><span class="variable">$table</span> -字体大小= 13px</span><br></pre></td></tr></table></figure>
<p>然后<code>variable</code>在<code>custom_file_path</code>部分下取消注释主题配置文件.</p>
<h3 id="永久链接插件"><a class="markdownIt-Anchor" href="#永久链接插件"></a> 永久链接插件</h3>
<p>插件rozbo/hexo-abbrlink支持生成更加常见的永久链接，其实现方式</p>
<p>对标题+时间进行md5然后再转base64，保存在front-matter中。</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">可以修改生成的算法和表示方式</span><br><span class="line"></span><br><span class="line">算法：crc16(默认)或crc32</span><br><span class="line">表示：dec(默认，十进制)或hex(十六进制)</span><br></pre></td></tr></table></figure>
<p>配置方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br><span class="line">编译后会在源文件的配置块中插入</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abbrlink: xxxxx</span><br></pre></td></tr></table></figure>
<h3 id="本地搜索"><a class="markdownIt-Anchor" href="#本地搜索"></a> 本地搜索</h3>
<p>本地搜索不需要任何外部 3rd 方服务，并且可以被搜索引擎额外索引。建议大多数用户使用此搜索方法。</p>
<h4 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h4>
<p>站点根目录执行以下命令安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h4 id="hexo-_configyml"><a class="markdownIt-Anchor" href="#hexo-_configyml"></a> Hexo _config.yml</h4>
<p>编辑 站点配置文件 ,在底部添加如下设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>
<h4 id="next-_configyml"><a class="markdownIt-Anchor" href="#next-_configyml"></a> NexT _config.yml</h4>
<p>编辑 主题配置文件 启用本地搜索：打开<code>Local Search</code>功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：在<code>Firefox</code>上无法正常使用搜索服务，而<code>Chrome</code>和<code>Opera</code>没有问题。</strong></p>
<h3 id="aplayer播放音乐"><a class="markdownIt-Anchor" href="#aplayer播放音乐"></a> Aplayer播放音乐</h3>
<p>下载APlayer，复制dist文件夹到主题source下，如D:\Blog\themes\next\source。D:\Blog\themes\next\source\dist下创建music.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;aplayer&#x27;</span>),</span><br><span class="line">    <span class="attr">volume</span>: <span class="number">0.3</span>,</span><br><span class="line">    <span class="attr">autoplay</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">loop</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    <span class="attr">listFolded</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">listMaxHeight</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">audio</span>: [</span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">// // name: &#x27;千秋&#x27;,</span></span><br><span class="line">        <span class="comment">// // artist: &#x27;天予风流&#x27;,</span></span><br><span class="line">        <span class="comment">// // url: &#x27;/千秋.mp3&#x27;, 本地存在source下</span></span><br><span class="line">        <span class="comment">// // cover: &#x27;/images/天予风流.jpg&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;等到烟火清凉&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;许嵩&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://www.ytmp3.cn/down/30350.mp3&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;/images/烟火.jpg&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;千秋&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: <span class="string">&#x27;古剑奇谭3-天予风流&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://xp.hifini.com:233/music/%E5%8F%A4%E5%89%91%E5%A5%87%E8%B0%AD3_%E5%8D%83%E7%A7%8B.m4a&#x27;</span>,</span><br><span class="line">        <span class="attr">cover</span>: <span class="string">&#x27;/images/天予风流.jpg&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在D:\Blog\themes\next\layout_macro\sideber.njk添加如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;/div&gt;</span><br><span class="line"># 添加位置</span><br><span class="line">    &lt;!-- 加载Aplayer播放器 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/dist/APlayer.min.css&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/dist/music.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/aside&gt;</span><br></pre></td></tr></table></figure>
<h3 id="hexo-markdown渲染器-upupminghexo-renderer-markdown-it-plus"><a class="markdownIt-Anchor" href="#hexo-markdown渲染器-upupminghexo-renderer-markdown-it-plus"></a> hexo markdown渲染器 @upupming/hexo-renderer-markdown-it-plus</h3>
<p><a href="https://blog.csdn.net/qq_36667170/article/details/105846999">https://blog.csdn.net/qq_36667170/article/details/105846999</a></p>
<p><a href="https://bugwz.com/2019/09/17/hexo-markdown-renderer/">https://bugwz.com/2019/09/17/hexo-markdown-renderer/</a></p>
]]></content>
  </entry>
  <entry>
    <title>JavaScript 中 Date() 日期对象</title>
    <url>/posts/4a17b201.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="javascript-中-date-日期对象"><a class="markdownIt-Anchor" href="#javascript-中-date-日期对象"></a> JavaScript 中 Date() 日期对象</h2>
<p>Date() <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 日期对象是一个构造函数，必须使用 new 来调用创建</p>
<p>Date对象是基于1970年1月1日（世界标准时间）起的毫秒数，时间戳</p>
<h3 id="网站计时案例分析"><a class="markdownIt-Anchor" href="#网站计时案例分析"></a> 网站计时案例分析</h3>
<span id="more"></span>
<p>核心算法：现在的时间减去输入的时间，但是不能直接用时分秒相减；采用时间戳，时间毫秒数转换，parseInt() <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>取整</p>
<p>转换公式如下：</p>
<blockquote>
<p>d = parseInt(总秒数/60/60/24) 计算天<br />
h = parseInt(总秒数/60/60%24) 计算小时<br />
m = parseInt(总秒数/60%60) 计算分<br />
s = parseInt(总秒数%60) 计算秒</p>
</blockquote>
<h3 id="核心代码部分"><a class="markdownIt-Anchor" href="#核心代码部分"></a> 核心代码部分</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心算法：现在的时间减去输入的时间，但是不能直接用时分秒相减；采用时间戳，时间毫秒数转换</span></span><br><span class="line"><span class="comment">// 转换公式如下：</span></span><br><span class="line"><span class="comment">// d = parseInt(总秒数/60/60/24) 计算天</span></span><br><span class="line"><span class="comment">// h = parseInt(总秒数/60/60%24) 计算小时</span></span><br><span class="line"><span class="comment">// m = parseInt(总秒数/60%60) 计算分</span></span><br><span class="line"><span class="comment">// s = parseInt(总秒数%60) 计算秒</span></span><br><span class="line"><span class="comment">// 封装一个函数,设置一个计时器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="string">&quot;runTime()&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">// 现在时间戳</span></span><br><span class="line">        sinceTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2020-12-1 10:24:00&#x27;</span>); <span class="comment">// 传入建立时间转时间戳</span></span><br><span class="line">        times = (nowTime - sinceTime) / <span class="number">1000</span>; <span class="comment">// 返回的是秒</span></span><br><span class="line">        years = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span> / <span class="number">365</span>);</span><br><span class="line">        years = years &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + years : years; <span class="comment">// 三元运算符</span></span><br><span class="line">        dates = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>) - years*<span class="number">365</span>;</span><br><span class="line">        dates = dates &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + dates : dates;</span><br><span class="line">        hours = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">        hours = hours &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + hours : hours;</span><br><span class="line">        minutes = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">        minutes = minutes &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + minutes : minutes;</span><br><span class="line">        seconds = <span class="built_in">parseInt</span>(times % <span class="number">60</span>);</span><br><span class="line">        seconds = seconds &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + seconds : seconds;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;runtime&quot;</span>).innerHTML = <span class="string">&quot; 已运行 &quot;</span> + years + <span class="string">&#x27; 年 &#x27;</span> + dates + <span class="string">&#x27; 天 &#x27;</span> + hours + <span class="string">&#x27; 小时 &#x27;</span> + minutes + <span class="string">&#x27; 分钟 &#x27;</span> + seconds + <span class="string">&#x27; 秒 &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">runTime();</span><br></pre></td></tr></table></figure>
<h3 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符"></a> 三元运算符</h3>
<p><strong>语法为：条件表达式 ? 表达式1 : 表达式2</strong></p>
<p>说明：问号前面的位置是判断的条件，判断结果为bool型，为true时调用表达式1，为false时调用表达式2</p>
<p>其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行表达式2</p>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">Date()</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt">parseInt()</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
  </entry>
  <entry>
    <title>对“浮动”和“清除浮动”的理解</title>
    <url>/posts/7a6c86f1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对浮动和清除浮动的理解"><a class="markdownIt-Anchor" href="#对浮动和清除浮动的理解"></a> 对“浮动”和“清除浮动”的理解</h2>
<p>在最初 Html 刚刚出现时，并没有让布局元素以及大部分其他元素既能够<strong>设置宽高</strong>，<strong>又能够与其他元素处于同一行</strong>（表格元素除外）。块元素能够设置宽高，但是默认独占一行；行元素默认由内容撑开高度，虽然某个行元素能够和其他元素处于同一行，但是并不能设置宽高。</p>
<p>CSS中的浮动，主要是为了解决以上问题。设置浮动后，就能够更方便地进行页面布局。</p>
<blockquote>
<p>生活中的“浮动”–水槽</p>
</blockquote>
<p>浮动会导致元素<strong>脱离文档流</strong>。脱离文档流的元素并不会占据<strong>物理空间</strong>，而是会引起父级<strong>元素高度塌陷</strong>，也会对浮动元素之后的<strong>其他兄弟级</strong>元素造成布局影响。</p>
<p>在浮动的过程中，左右浮动的模块并不会互相干涉、阻碍对方运动，左浮动的模块可能会阻挡其他左浮动的模块，右浮动的模块可能会阻挡其他右浮动的模块。但是在最终空间的占用上，还是会互相有所影响。</p>
<p>为了减少以上影响，就需要及时清除浮动。</p>
<p>一类是<strong>清除掉对后面兄弟级元素的影响</strong>，只需为浮动元素的下一个兄弟级元素设置 <code>clear: both/left/right;</code>属性；如果希望浮动元素与清除浮动的兄弟级元素之间有一定间距，为<strong>浮动元素后面的一个兄弟级元素设置顶部外边距时会失效</strong>（实际上是与浮动元素内容空白区叠加），此时可以为浮动元素设置下边距。</p>
<p>另一类是<strong>清除掉对父级元素的影响</strong>，主要包括<strong>空标签清浮动、br 标签清浮动、overflow: hidden、overflow: auto、父级元素浮动、after 伪元素清浮动</strong>等常见方法。</p>
<p>其中使用较多的是 after 伪元素清浮动，该方法与空标签清浮动方法原理相同，其实现的基本代码为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attribute">content</span>: <span class="string">&quot;\200B&quot;</span>; <span class="attribute">clear</span>: both; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
